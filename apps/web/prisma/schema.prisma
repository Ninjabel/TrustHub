generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                   @id @default(cuid())
  email                    String                   @unique
  name                     String
  phone                    String?
  pesel                    String?
  password                 String
  role                     UserRole                 @default(ENTITY_USER)
  isSystemAccount          Boolean                  @default(false)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  auditLogs                AuditLog[]
  bulletinsCreated         Bulletin[]
  bulletinReads            BulletinRead[]
  casesAssigned            Case[]                   @relation("AssignedCases")
  casesCreated             Case[]
  faqs                     FAQ[]
  faqRatings               FAQRating[]
  financialReports         FinancialReport[]
  libraryFiles             LibraryFile[]
  messagesSent             Message[]
  messageThreads           MessageThread[]
  memberships              OrganizationMembership[]
  ripFormData              RIPFormData[]
  reports                  Report[]
  reportSubmissions        ReportSubmission[]
  regulatoryReports        RegulatoryReport[]
  regulatoryReportComments RegulatoryReportComment[]
  accessRequests           AccessRequest[]
  reviewedAccessRequests   AccessRequest[]         @relation("AccessRequestReviewedBy")

  @@index([email])
  @@index([role])
  @@index([isSystemAccount])
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

enum AccessRequestStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  BLOCKED
}

model AccessRequest {
  id             String              @id @default(cuid())
  userId         String
  organizationId String
  requestedRole  OrganizationRole?
  permissions    String[]
  justification  String
  attachments    String[]
  status         AccessRequestStatus @default(PENDING)
  uknfComment    String?
  reviewedById   String?
  reviewedAt     DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reviewedBy     User?               @relation("AccessRequestReviewedBy", fields: [reviewedById], references: [id])

  @@index([organizationId])
  @@index([status])
}

model Organization {
  id                       String                   @id @default(cuid())
  name                     String
  slug                     String                   @unique
  uknfCode                 String?                  @unique
  lei                      String?
  nip                      String?
  krs                      String?
  type                     String?
  category                 String?
  sector                   String?
  subsector                String?
  street                   String?
  building                 String?
  apartment                String?
  postalCode               String?
  city                     String?
  status                   OrganizationStatus       @default(ACTIVE)
  isCrossBorder            Boolean                  @default(false)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  cases                    Case[]
  financialReports         FinancialReport[]
  threads                  MessageThread[]
  memberships              OrganizationMembership[]
  ripFormData              RIPFormData[]
  reports                  Report[]
  reportSubmissions        ReportSubmission[]
  regulatoryReports        RegulatoryReport[]
  accessRequests           AccessRequest[]

  @@index([slug])
  @@index([uknfCode])
  @@index([status])
}

model Report {
  id             String        @id @default(cuid())
  title          String
  description    String?
  fileName       String
  fileUrl        String
  fileSize       Int
  status         ReportStatus  @default(DRAFT)
  errorMessage   String?
  userId         String
  organizationId String?
  processedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
}

model ReportSubmission {
  id               String       @id @default(cuid())
  period           ReportPeriod
  year             Int
  fileName         String
  fileUrl          String
  fileSize         Int
  status           ReportStatus @default(PROCESSING)
  validationReport String?
  errorDetails     String?
  organizationId   String
  submittedById    String
  validatedAt      DateTime?
  submittedAt      DateTime     @default(now())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedBy      User         @relation(fields: [submittedById], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([submittedById])
  @@index([status])
  @@index([period, year])
}

model MessageThread {
  id             String        @id @default(cuid())
  subject        String
  status         ThreadStatus  @default(OPEN)
  organizationId String?
  createdById    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  messages       Message[]
  createdBy      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([createdById])
  @@index([status])
  @@index([createdAt])
}

model Message {
  id          String        @id @default(cuid())
  body        String
  attachments String[]
  threadId    String
  senderId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sender      User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  thread      MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([senderId])
  @@index([createdAt])
}

model Case {
  id             String         @id @default(cuid())
  title          String
  description    String
  status         CaseStatus     @default(NEW)
  priority       CasePriority   @default(MEDIUM)
  createdById    String
  assignedToId   String?
  organizationId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  closedAt       DateTime?
  assignedTo     User?          @relation("AssignedCases", fields: [assignedToId], references: [id])
  createdBy      User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  timeline       CaseTimeline[]

  @@index([createdById])
  @@index([assignedToId])
  @@index([organizationId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

model CaseTimeline {
  id        String   @id @default(cuid())
  caseId    String
  event     String
  details   String?
  createdAt DateTime @default(now())
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([createdAt])
}

model Bulletin {
  id                 String                @id @default(cuid())
  title              String
  body               String
  priority           BulletinPriority      @default(NORMAL)
  recipientType      BulletinRecipientType @default(ALL)
  recipientFilter    String?
  requireReadReceipt Boolean               @default(false)
  attachments        String[]
  authorId           String
  publishedAt        DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  author             User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reads              BulletinRead[]

  @@index([authorId])
  @@index([publishedAt])
  @@index([priority])
}

model BulletinRead {
  id             String   @id @default(cuid())
  bulletinId     String
  userId         String
  organizationId String?
  readAt         DateTime @default(now())
  bulletin       Bulletin @relation(fields: [bulletinId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bulletinId, userId])
  @@index([userId])
  @@index([bulletinId])
  @@index([readAt])
}

model LibraryFile {
  id              String                  @id @default(cuid())
  title           String
  description     String?
  fileName        String
  fileUrl         String
  fileSize        Int
  mimeType        String
  version         String                  @default("1.0")
  
  // Extended metadata for UKNF library
  reportPeriod    LibraryReportPeriod     @default(NONE)
  isArchived      Boolean                 @default(false)
  archivedAt      DateTime?
  
  // Access control
  accessType      LibraryAccessType       @default(GLOBAL)
  accessList      String[]                @default([]) // Organization IDs or group identifiers
  
  // Recipients and notifications
  recipientGroups Json?                   // { group1: [], group2: [], group3: [] }
  notifyOnUpload  Boolean                 @default(false)
  
  // Versioning and history
  previousVersionId String?
  previousVersion LibraryFile?            @relation("FileVersions", fields: [previousVersionId], references: [id], onDelete: SetNull)
  nextVersions    LibraryFile[]           @relation("FileVersions")
  
  uploadedById    String
  uploadedBy      User                    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([uploadedById])
  @@index([createdAt])
  @@index([isArchived])
  @@index([previousVersionId])
}

model FAQ {
  id          String      @id @default(cuid())
  question    String
  answer      String
  category    String?
  isPublished Boolean     @default(true)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ratings     FAQRating[]

  @@index([authorId])
  @@index([category])
  @@index([isPublished])
}

model FAQRating {
  id        String   @id @default(cuid())
  faqId     String
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  faq       FAQ      @relation(fields: [faqId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([faqId, userId])
  @@index([faqId])
  @@index([userId])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String?
  details    String?
  ipAddress  String?
  userId     String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resource])
  @@index([createdAt])
}

model FinancialReport {
  id               String              @id @default(cuid())
  reportType       FinancialReportType
  period           ReportPeriod
  year             Int
  quarter          Int?
  variant          String?             @default("kalkulacyjny")
  organizationId   String
  submittedById    String
  status           ReportStatus        @default(DRAFT)
  validationErrors String?
  data             Json?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  submittedAt      DateTime?
  validatedAt      DateTime?
  organization     Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedBy      User                @relation(fields: [submittedById], references: [id], onDelete: Cascade)
  profitLossLines  ProfitLossLine[]

  @@unique([organizationId, reportType, period, year, quarter])
  @@index([organizationId])
  @@index([reportType])
  @@index([period, year])
  @@index([status])
}

model ProfitLossLine {
  id                String          @id @default(cuid())
  financialReportId String
  lineCode          String
  lineName          String
  value             Decimal         @default(0) @db.Decimal(18, 2)
  parentLineCode    String?
  level             Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  financialReport   FinancialReport @relation(fields: [financialReportId], references: [id], onDelete: Cascade)

  @@unique([financialReportId, lineCode])
  @@index([financialReportId])
  @@index([lineCode])
}

model RIPFormData {
  id               String       @id @default(cuid())
  taxonomy         String
  entityIdentifier String
  startDate        DateTime
  endDate          DateTime
  currency         String       @default("PLN")
  formIdentifier   String
  formDescription  String?
  organizationId   String
  submittedById    String
  formData         Json
  status           ReportStatus @default(DRAFT)
  validationErrors String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedBy      User         @relation(fields: [submittedById], references: [id], onDelete: Cascade)

  @@unique([organizationId, formIdentifier, startDate, endDate])
  @@index([organizationId])
  @@index([formIdentifier])
  @@index([startDate, endDate])
}

enum UserRole {
  UKNF_ADMIN
  UKNF_EMPLOYEE
  UKNF_INSTITUTION
  ENTITY_ADMIN
  ENTITY_USER
}

enum OrganizationRole {
  ADMIN
  USER
}

enum ReportStatus {
  DRAFT
  PROCESSING
  SUCCESS
  RULE_ERROR
  SYSTEM_ERROR
}

enum ReportPeriod {
  Q1
  Q2
  Q3
  Q4
  ANNUAL
}

enum ThreadStatus {
  OPEN
  AWAITING_RESPONSE
  ANSWERED
  CLOSED
}

enum CaseStatus {
  NEW
  IN_PROGRESS
  DONE
  CANCELLED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BulletinPriority {
  LOW
  NORMAL
  HIGH
}

enum BulletinRecipientType {
  ALL
  BY_TYPE
  BY_ENTITY
  BY_GROUP
}

enum FinancialReportType {
  PROFIT_LOSS_STATEMENT
  BALANCE_SHEET
  CASH_FLOW
  EQUITY_CHANGES
  RIP_Q1
  RIP_Q2
  RIP_Q3
  RIP_Q4
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// ============================================
// REGULATORY REPORTING MODULE
// ============================================

model RegulatoryReport {
  id                    String                        @id @default(cuid())
  fileName              String
  fileUrl               String
  fileSize              Int
  mimeType              String                        @default("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
  
  // Metadata
  entityCode            String
  entityName            String
  period                String // "Q1 2025", "2024", etc.
  reportType            RegulatoryReportType
  
  // Validation & Status
  status                RegulatoryReportStatus        @default(DRAFT)
  validatedAt           DateTime?
  validationReportUrl   String?
  validationNotes       String?                       @db.Text
  
  // Submission info
  submittedById         String
  submittedByName       String
  submittedByEmail      String
  submittedAt           DateTime                      @default(now())
  
  // Corrections
  isCorrection          Boolean                       @default(false)
  correctedReportId     String?
  correctedReport       RegulatoryReport?             @relation("ReportCorrections", fields: [correctedReportId], references: [id], onDelete: SetNull)
  corrections           RegulatoryReport[]            @relation("ReportCorrections")
  
  // Archive
  isArchived            Boolean                       @default(false)
  archivedAt            DateTime?
  
  // Relations
  organizationId        String
  organization          Organization                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedBy           User                          @relation(fields: [submittedById], references: [id], onDelete: Cascade)
  
  // Communication threads specific to this report
  comments              RegulatoryReportComment[]
  statusHistory         RegulatoryReportStatusHistory[]
  
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  
  @@index([organizationId])
  @@index([submittedById])
  @@index([status])
  @@index([reportType])
  @@index([period])
  @@index([isArchived])
  @@index([correctedReportId])
  @@index([submittedAt])
}

model RegulatoryReportComment {
  id        String           @id @default(cuid())
  reportId  String
  userId    String
  userName  String
  userRole  UserRole
  comment   String           @db.Text
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  report    RegulatoryReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([userId])
  @@index([createdAt])
}

model RegulatoryReportStatusHistory {
  id        String                 @id @default(cuid())
  reportId  String
  status    RegulatoryReportStatus
  note      String?                @db.Text
  changedBy String?
  createdAt DateTime               @default(now())
  
  report    RegulatoryReport       @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([createdAt])
}

model ReportingCalendar {
  id             String                 @id @default(cuid())
  period         String // "Q1 2025", "2024", etc.
  reportType     RegulatoryReportType
  dueDate        DateTime
  description    String?                @db.Text
  isActive       Boolean                @default(true)
  
  // Completion tracking (computed dynamically, or cached)
  completionRate Float?                 @default(0)
  
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  
  @@unique([period, reportType])
  @@index([dueDate])
  @@index([isActive])
}

enum RegulatoryReportStatus {
  DRAFT                 // Roboczy
  SUBMITTED             // Przekazany
  IN_PROGRESS           // W trakcie walidacji
  SUCCESS               // Proces zakończony sukcesem
  RULE_ERROR            // Błędy z reguł walidacji
  SYSTEM_ERROR          // Błąd techniczny
  TIMEOUT_ERROR         // Błąd – przekroczono czas
  REJECTED_BY_UKNF      // Zakwestionowane przez UKNF
}

enum RegulatoryReportType {
  QUARTERLY             // Kwartalne
  ANNUAL                // Roczne
  AD_HOC                // Ad-hoc
  CORRECTION            // Korekta
}

// ============================================
// LIBRARY MODULE ENUMS
// ============================================

enum LibraryReportPeriod {
  QUARTERLY             // Kwartalny
  ANNUAL                // Roczny
  NONE                  // Brak
}

enum LibraryAccessType {
  GLOBAL                // Dostępny dla wszystkich
  ENTITY_SPECIFIC       // Dla wybranych podmiotów
}

